#' @description Computes various measures based on autocorrelation coefficients of the
#' original series, first-differenced series and second-differenced series
#' @param y a univariate time series
#' @return A vector of 3 values: sum of squared of first five autocorrelation coefficients of original series, first-differenced series,
#' and twice-differenced series.
#' @author Thiyanga Talagala
#' @export
acf5 <- function(y){
acfy <- stats::acf(y, lag.max = 5L, plot = FALSE)
acfdiff1y <- stats::acf(diff(y, 1), lag.max = 5L, plot = FALSE)
acfdiff2y <- stats::acf(diff(y, 2), lag.max = 5L, plot = FALSE)
sum_of_sq_acf5 <- sum((acfy$acf[2L:6L])^2)
diff1_acf5 <- sum((acfdiff1y$acf[2L:6L])^2)
diff2_acf5 <- sum((acfdiff2y$acf[2L:6L])^2)
output <- c(y_acf5 = unname(sum_of_sq_acf5),
diff1y_acf5 = unname(diff1_acf5),
diff2y_acf5 = unname(diff2_acf5))
return(output)
}
#' Autocorrelation coefficient at lag 1 of the residuals
#'
#' Computes the first order autocorrelation of the residual series of the deterministic trend model
#' @param y a univariate time series
#' @return A numeric value.
#' @author Thiyanga Talagala
#' @export
e_acf1 <- function(y){
n <- length(y)
time <- 1:n
linear_mod <- stats::lm(y~time)
Res <- stats::resid(linear_mod)
lmres_acf1 <- stats::acf(Res,lag.max=1,plot=FALSE)$acf[-1]
output <- c(lmres_acf1 = unname(lmres_acf1))
return(output)
}
#' Unit root test statistics
#'
#' Computes the test statistics based on unit root tests Phillipsâ€“Perron test and
#' KPSS test
#' @param  y a univariate time series
#' @return A vector of 3 values: test statistic based on PP-test and KPSS-test
#' @author Thiyanga Talagala
#' @export
unitroot <- function(y){
ur_pp <- urca::ur.pp(y, type = "Z-alpha",
model = "constant")@teststat[1]
ur_kpss <- urca::ur.kpss(y, type = "tau")@teststat[1]
output <- c(
ur_pp = unname(ur_pp),
ur_kpss = unname(ur_kpss))
return(output)
}
#' Parameter estimates of Holt-Winters seasonal method
#'
#' Estimate the smoothing parameter for the level-alpha and
#' the smoothing parameter for the trend-beta, and seasonality-gamma
#' @param y a univariate time series
#' @return A vector of 3 values: alpha, beta, gamma
#' @author Thiyanga Talagala
#' @export
holtWinter_parameters <- function(y){
fit <- forecast::hw(y)
output <- c(hwalpha = unname(fit$model$par["alpha"]),
hwbeta = unname(fit$model$par["beta"]),
hwgamma = unname(fit$model$par["gamma"]))
return(output)
}
#' Autocorrelation coefficients based on seasonally differenced series
#'
#' @param y a univariate time series
#' @param m frequency of the time series
#' @param lagmax maximum lag at which to calculate the acf
#' @return A vector of 3 values: first ACF value of seasonally-differenced series, ACF value at the first seasonal lag of seasonally-differenced series,
#' sum of squares of first 5 autocorrelation coefficients of seasonally-differenced series.
#' @author Thiyanga Talagala
#' @export
acf_seasonalDiff <- function(y,m, lagmax){ # monthly lagmax=13L, quarterly lagmax=5L
sdiff <- diff(y, lag=m, differences=1)
sEacfy <- stats::acf(sdiff, lag.max = lagmax, plot = FALSE)
SEacf_1 <- sEacfy$acf[2L]
SEseas_acf1 <- sEacfy$acf[m+1L]
SEsum_of_sq_acf5 <- sum((sEacfy$acf[2L:6L])^2)
output <- c(
sediff_acf1 = unname(SEacf_1),
sediff_seacf1 = unname(SEseas_acf1),
sediff_acf5 = unname(SEsum_of_sq_acf5))
return(output)
}
#' @title Calculate features for new time series instances
#'
#' @description Computes relevant time series features before applying them to the model
#' @param ts_data_set a list of univariate time series
#' @param seasonal if FALSE, restricts to features suitable for non-seasonal data
#' @return dataframe: each column represent a feature and each row represent a time series
#' @author Thiyanga Talagala
#' @export
cal_features <- function(ts_data_set, seasonal=FALSE){ # ts_data_set = yearly_m1
train <- lapply(ts_data_set, function(temp){temp$x})
ts_features_pkg <- tsfeatures::tsfeatures(train, c("entropy",
"lumpiness",
"stability",
"hurst",
"stl_features",
"acf_features",
"pacf_features",
"holt_parameters",
"nonlinearity"))
if (seasonal==FALSE){
ts_features1 <- ts_features_pkg %>% dplyr::select ("entropy", "lumpiness", "stability", "hurst",
"trend", "spike", "linearity", "curvature",
"e_acf1", "x_acf1", "diff1_acf1", "diff2_acf1",
"x_pacf5","diff1x_pacf5", "diff2x_pacf5", "alpha",
"beta","nonlinearity")
seer_features_nonseasonal <- lapply(ts_data_set, function(temp1){c(
e_acf1(temp1$x),
unitroot(temp1$x))})
seer_features_nonseasonal_DF <- as.data.frame(do.call("rbind", seer_features_nonseasonal))
ts_features <- dplyr::bind_cols(ts_features1, seer_features_nonseasonal_DF)
} else {
ts_features <- ts_features_pkg %>% dplyr::select ("entropy", "lumpiness", "stability", "hurst",
"trend", "spike", "linearity", "curvature",
"e_acf1", "x_acf1", "diff1_acf1", "diff2_acf1",
"x_pacf5","diff1x_pacf5", "diff2x_pacf5", "alpha",
"beta","nonlinearity", "seasonal_strength",
"seas_pacf")
}
ts_featuresDF <- as.data.frame(ts_features)
ts_featuresDF <- dplyr::rename(ts_featuresDF, spikiness = spike)
ts_featuresDF <- dplyr::rename(ts_featuresDF, y_acf1 = x_acf1)
ts_featuresDF <- dplyr::rename(ts_featuresDF, diff1y_acf1 = diff1_acf1)
ts_featuresDF <- dplyr::rename(ts_featuresDF, diff2y_acf1 = diff2_acf1)
ts_featuresDF <- dplyr::rename(ts_featuresDF, y_pacf5 = x_pacf5)
ts_featuresDF <- dplyr::rename(ts_featuresDF, diff1y_pacf5 = diff1x_pacf5)
ts_featuresDF <- dplyr::rename(ts_featuresDF, diff2y_pacf5 = diff2x_pacf5)
if(seasonal==TRUE){
ts_featuresDF <- dplyr::rename(ts_featuresDF, seasonality = seasonal_strength)
}
length <- lapply(ts_data_set, function(temp){length(temp$x)})
length <- unlist(length)
ts_featuresDF$N <- length
seer_features <- lapply(ts_data_set, function(temp1){acf5(temp1$x)})
seer_feature_DF <- as.data.frame(do.call("rbind", seer_features))
featureDF <- dplyr::bind_cols(ts_featuresDF,seer_feature_DF)
return(featureDF)
}
require(Mcomp)
data(M3)
quarterly_m3 <- subset(M3, "quarterly")
cal_features(quarterly_m3, seasonal=TRUE)
library(tsfeatures)
#' @title Calculate features for new time series instances
#'
#' @description Computes relevant time series features before applying them to the model
#' @param ts_data_set a list of univariate time series
#' @param seasonal if FALSE, restricts to features suitable for non-seasonal data
#' @return dataframe: each column represent a feature and each row represent a time series
#' @author Thiyanga Talagala
#' @export
cal_features <- function(ts_data_set, seasonal=FALSE){ # ts_data_set = yearly_m1
train <- lapply(ts_data_set, function(temp){temp$x})
ts_features_pkg <- tsfeatures::tsfeatures(train, c("entropy",
"lumpiness",
"stability",
"hurst",
"stl_features",
"acf_features",
"pacf_features",
"holt_parameters",
"nonlinearity"))
if (seasonal==FALSE){
ts_features1 <- ts_features_pkg %>% dplyr::select ("entropy", "lumpiness", "stability", "hurst",
"trend", "spike", "linearity", "curvature",
"e_acf1", "x_acf1", "diff1_acf1", "diff2_acf1",
"x_pacf5","diff1x_pacf5", "diff2x_pacf5", "alpha",
"beta","nonlinearity")
seer_features_nonseasonal <- lapply(ts_data_set, function(temp1){c(
e_acf1(temp1$x),
unitroot(temp1$x))})
seer_features_nonseasonal_DF <- as.data.frame(do.call("rbind", seer_features_nonseasonal))
ts_features <- dplyr::bind_cols(ts_features1, seer_features_nonseasonal_DF)
} else {
ts_features <- ts_features_pkg %>% dplyr::select ("entropy", "lumpiness", "stability", "hurst",
"trend", "spike", "linearity", "curvature",
"e_acf1", "x_acf1", "diff1_acf1", "diff2_acf1",
"x_pacf5","diff1x_pacf5", "diff2x_pacf5", "alpha",
"beta","nonlinearity", "seasonal_strength",
"seas_pacf")
}
ts_featuresDF <- as.data.frame(ts_features)
ts_featuresDF <- dplyr::rename(ts_featuresDF, spikiness = spike)
ts_featuresDF <- dplyr::rename(ts_featuresDF, y_acf1 = x_acf1)
ts_featuresDF <- dplyr::rename(ts_featuresDF, diff1y_acf1 = diff1_acf1)
ts_featuresDF <- dplyr::rename(ts_featuresDF, diff2y_acf1 = diff2_acf1)
ts_featuresDF <- dplyr::rename(ts_featuresDF, y_pacf5 = x_pacf5)
ts_featuresDF <- dplyr::rename(ts_featuresDF, diff1y_pacf5 = diff1x_pacf5)
ts_featuresDF <- dplyr::rename(ts_featuresDF, diff2y_pacf5 = diff2x_pacf5)
if(seasonal==TRUE){
ts_featuresDF <- dplyr::rename(ts_featuresDF, seasonality = seasonal_strength)
}
length <- lapply(ts_data_set, function(temp){length(temp$x)})
length <- unlist(length)
ts_featuresDF$N <- length
seer_features <- lapply(ts_data_set, function(temp1){acf5(temp1$x)})
seer_feature_DF <- as.data.frame(do.call("rbind", seer_features))
featureDF <- dplyr::bind_cols(ts_featuresDF,seer_feature_DF)
return(featureDF)
}
quarterly_m3 <- subset(M3, "quarterly")
cal_features(quarterly_m3, seasonal=TRUE)
a <- cal_features(quarterly_m3, seasonal=TRUE)
head(a)
names(a)
library(seer)
?predict_models
library(seer)
?predict_models
?predict_models
devtools::install_github("thiyangt/colmozzie")
library(colmozzie)
summary(colmozzie)
names(colmozzie)
library(seer)
install.packages("colmozzie")
install.packages("colmozzie")
head(colmozzie)
library(colmozzie)
head(colmozzie)
library(seer)
library(seer)
require(Mcomp)
data(M3)
quarterly_m3 <- subset(M3, "quarterly")
cal_features(quarterly_m3, seasonal = TRUE, m=4, lagmax=5L)
library(seer)
?cal_features
?predict_models
require(Mcomp)
data(M3)
quarterly_m3 <- subset(M3, "quarterly")
cal_features(quarterly_m3, seasonal=TRUE, m=4, lagmax=5L)
#' Autocorrelation-based features
#'
#' Computes various measures based on autocorrelation coefficients of the
#' original series, first-differenced series and second-differenced series
#' @param y a univariate time series
#' @return A vector of 3 values: sum of squared of first five autocorrelation coefficients of original series, first-differenced series,
#' and twice-differenced series.
#' @author Thiyanga Talagala
#' @export
acf5 <- function(y){
acfy <- stats::acf(y, lag.max = 5L, plot = FALSE)
acfdiff1y <- stats::acf(diff(y, 1), lag.max = 5L, plot = FALSE)
acfdiff2y <- stats::acf(diff(y, 2), lag.max = 5L, plot = FALSE)
sum_of_sq_acf5 <- sum((acfy$acf[2L:6L])^2)
diff1_acf5 <- sum((acfdiff1y$acf[2L:6L])^2)
diff2_acf5 <- sum((acfdiff2y$acf[2L:6L])^2)
output <- c(y_acf5 = unname(sum_of_sq_acf5),
diff1y_acf5 = unname(diff1_acf5),
diff2y_acf5 = unname(diff2_acf5))
return(output)
}
#' Autocorrelation coefficient at lag 1 of the residuals
#'
#' Computes the first order autocorrelation of the residual series of the deterministic trend model
#' @param y a univariate time series
#' @return A numeric value.
#' @author Thiyanga Talagala
#' @export
e_acf1 <- function(y){
n <- length(y)
time <- 1:n
linear_mod <- stats::lm(y~time)
Res <- stats::resid(linear_mod)
lmres_acf1 <- stats::acf(Res,lag.max=1,plot=FALSE)$acf[-1]
output <- c(lmres_acf1 = unname(lmres_acf1))
return(output)
}
#' Unit root test statistics
#'
#' Computes the test statistics based on unit root tests Phillipsâ€“Perron test and
#' KPSS test
#' @param  y a univariate time series
#' @return A vector of 3 values: test statistic based on PP-test and KPSS-test
#' @author Thiyanga Talagala
#' @export
unitroot <- function(y){
ur_pp <- urca::ur.pp(y, type = "Z-alpha",
model = "constant")@teststat[1]
ur_kpss <- urca::ur.kpss(y, type = "tau")@teststat[1]
output <- c(
ur_pp = unname(ur_pp),
ur_kpss = unname(ur_kpss))
return(output)
}
#' Parameter estimates of Holt-Winters seasonal method
#'
#' Estimate the smoothing parameter for the level-alpha and
#' the smoothing parameter for the trend-beta, and seasonality-gamma
#' @param y a univariate time series
#' @return A vector of 3 values: alpha, beta, gamma
#' @author Thiyanga Talagala
#' @export
holtWinter_parameters <- function(y){
fit <- forecast::hw(y)
output <- c(hwalpha = unname(fit$model$par["alpha"]),
hwbeta = unname(fit$model$par["beta"]),
hwgamma = unname(fit$model$par["gamma"]))
return(output)
}
#' Autocorrelation coefficients based on seasonally differenced series
#'
#' @param y a univariate time series
#' @param m frequency of the time series
#' @param lagmax maximum lag at which to calculate the acf
#' @return A vector of 3 values: first ACF value of seasonally-differenced series, ACF value at the first seasonal lag of seasonally-differenced series,
#' sum of squares of first 5 autocorrelation coefficients of seasonally-differenced series.
#' @author Thiyanga Talagala
#' @export
acf_seasonalDiff <- function(y,m, lagmax){ # monthly lagmax=13L, quarterly lagmax=5L
sdiff <- diff(y, lag=m, differences=1)
sEacfy <- stats::acf(sdiff, lag.max = lagmax, plot = FALSE)
SEacf_1 <- sEacfy$acf[2L]
SEseas_acf1 <- sEacfy$acf[m+1L]
SEsum_of_sq_acf5 <- sum((sEacfy$acf[2L:6L])^2)
output <- c(
sediff_acf1 = unname(SEacf_1),
sediff_seacf1 = unname(SEseas_acf1),
sediff_acf5 = unname(SEsum_of_sq_acf5))
return(output)
}
#'
#' Computes relevant time series features before applying them to the model
#' @param ts_data_set a list of univariate time series
#' @param seasonal if FALSE, restricts to features suitable for non-seasonal data
#' @param m frequency of the time series
#' @param lagmax maximum lag at which to calculate the acf (quarterly series-5L and monthly-13L)
#' @return dataframe: each column represent a feature and each row represent a time series
#' @importFrom magrittr %>%
#' @author Thiyanga Talagala
#' @export
cal_features <- function(ts_data_set, seasonal=FALSE, m=1, lagmax=2L){ # ts_data_set = yearly_m1,
train <- lapply(ts_data_set, function(temp){temp$x})
ts_features_pkg <- tsfeatures::tsfeatures(train, c("entropy",
"lumpiness",
"stability",
"hurst",
"stl_features",
"acf_features",
"pacf_features",
"holt_parameters",
"nonlinearity"))
if (seasonal==FALSE){
ts_features1 <- ts_features_pkg %>% dplyr::select ("entropy", "lumpiness", "stability", "hurst",
"trend", "spike", "linearity", "curvature",
"e_acf1", "x_acf1", "diff1_acf1", "diff2_acf1",
"x_pacf5","diff1x_pacf5", "diff2x_pacf5", "alpha",
"beta","nonlinearity")
seer_features_nonseasonal <- lapply(ts_data_set, function(temp1){c(
e_acf1(temp1$x),
unitroot(temp1$x))})
seer_features_nonseasonal_DF <- as.data.frame(do.call("rbind", seer_features_nonseasonal))
ts_features <- dplyr::bind_cols(ts_features1, seer_features_nonseasonal_DF)
} else {
ts_features1 <- ts_features_pkg %>% dplyr::select ("entropy", "lumpiness", "stability", "hurst",
"trend", "spike", "linearity", "curvature",
"e_acf1", "x_acf1", "diff1_acf1", "diff2_acf1",
"x_pacf5","diff1x_pacf5", "diff2x_pacf5", "alpha",
"beta","nonlinearity", "seasonal_strength",
"seas_pacf")
seer_features_seasonal <- lapply(ts_data_set, function(temp1){c(holtWinter_parameters(temp1$x),
acf_seasonalDiff(temp1$x, m, lagmax))})
seer_features_seasonal_DF <- as.data.frame(do.call("rbind", seer_features_seasonal))
ts_features <- dplyr::bind_cols(ts_features1, seer_features_seasonal_DF)
}
ts_featuresDF <- as.data.frame(ts_features)
ts_featuresDF <- dplyr::rename(ts_featuresDF, spikiness = spike)
ts_featuresDF <- dplyr::rename(ts_featuresDF, y_acf1 = x_acf1)
ts_featuresDF <- dplyr::rename(ts_featuresDF, diff1y_acf1 = diff1_acf1)
ts_featuresDF <- dplyr::rename(ts_featuresDF, diff2y_acf1 = diff2_acf1)
ts_featuresDF <- dplyr::rename(ts_featuresDF, y_pacf5 = x_pacf5)
ts_featuresDF <- dplyr::rename(ts_featuresDF, diff1y_pacf5 = diff1x_pacf5)
ts_featuresDF <- dplyr::rename(ts_featuresDF, diff2y_pacf5 = diff2x_pacf5)
if(seasonal==TRUE){
ts_featuresDF <- dplyr::rename(ts_featuresDF, seasonality = seasonal_strength)
}
length <- lapply(ts_data_set, function(temp){length(temp$x)})
length <- unlist(length)
ts_featuresDF$N <- length
seer_features <- lapply(ts_data_set, function(temp1){acf5(temp1$x)})
seer_feature_DF <- as.data.frame(do.call("rbind", seer_features))
featureDF <- dplyr::bind_cols(ts_featuresDF,seer_feature_DF)
return(featureDF)
}
require(Mcomp)
data(M3)
quarterly_m3 <- subset(M3, "quarterly")
cal_features(quarterly_m3, seasonal=TRUE, m=4, lagmax=5L)
library(tsfeatures)
cal_features(quarterly_m3, seasonal=TRUE, m=4, lagmax=5L)
library(tsfeatures)
featuresQ <- cal_features(quarterly_m3, seasonal=TRUE, m=4, lagmax=5L)
head(featuresQ,2)
?cal_features
library(Mcomp)
class(M3)
Mcomp
M3
str(Mcomp)
str(M3)
str(M3[[1]])
a <- list()
a$st <- 5
a$x <- rnorm(100)
a
str(a)
?class
class(a, Mdata)
b < as(a, "Mdata")
b <- as(a, "Mdata")
library(seer)
seer::cal_features(rnorm(5))
library(Mcomp)
seer::cal_features(M3)
yearly_m1 <- subset(M1,"Y")
seer::cal_features(yearly_m1)
library(tsfeatures)
seer::cal_features(yearly_m1)
library(seer)
library(seer)
library(seer)
library(seer)
library(seer)
library(seer)
library(seer)
library(M4comp2018)
M4
plot(M[[4]]$x)
plot(M4[[4]]$x)
plot(M4[[5]]$x)
plot(M4[[6]]$x)
plot(M4[[1000]$x)
plot(M4[[1000]]$x)
plot(M4[[1001]]$x)
plot(M4[[1002]]$x)
plot(M4[[1003]]$x)
plot(M4[[1004]]$x)
plot(M4[[1005]]$x)
plot(M4[[1006]]$x)
plot(M4[[1007]]$x)
plot(M4[[1008]]$x)
plot(M4[[1009]]$x)
plot(M4[[10010]]$x)
plot(M4[[10011]]$x)
plot(M4[[10012]]$x)
plot(M4[[10013]]$x)
plot(M4[[10014]]$x)
plot(M4[[10015]]$x)
plot(M4[[10016]]$x)
plot(M4[[10017]]$x)
plot(M4[[10018]]$x)
plot(M4[[10019]]$x)
plot(M4[[10020]]$x)
plot(M4[[10021]]$x)
plot(M4[[10022]]$x)
plot(M4[[10023]]$x)
plot(M4[[10024]]$x)
plot(M4[[10025]]$x)
plot(M4[[9000]]$x)
plot(M4[[9001]]$x)
plot(M4[[9002]]$x)
plot(M4[[9003]]$x)
plot(M4[[9004]]$x)
plot(M4[[9005]]$x)
plot(M4[[9006]]$x)
plot(M4[[9007]]$x)
plot(M4[[9008]]$x)
plot(M4[[9009]]$x)
plot(M4[[90010]]$x)
plot(M4[[90011]]$x)
plot(M4[[90012]]$x)
plot(M4[[90013]]$x)
plot(M4[[90014]]$x)
plot(M4[[90015]]$x)
plot(M4[[90016]]$x)
plot(M4[[90017]]$x)
plot(M4[[90018]]$x)
plot(M4[[90019]]$x)
plot(M4[[90020]]$x)
plot(M4[[90021]]$x)
plot(M4[[90022]]$x)
plot(M4[[9002]]$x)
plot(M4[[90023]]$x)
plot(M4[[90024]]$x)
plot(M4[[90025]]$x)
plot(M4[[90026]]$x)
plot(M4[[90027]]$x)
plot(M4[[90028]]$x)
plot(M4[[90029]]$x)
plot(M4[[90030]]$x)
plot(M4[[90031]]$x)
plot(M4[[90032]]$x)
plot(M4[[900100]]$x)
plot(M4[[100000]]$x)
plot(M4[[99999]]$x)
plot(M4[[99998]]$x)
plot(M4[[99997]]$x)
plot(M4[[99996]]$x)
plot(M4[[99995]]$x)
plot(M4[[99994]]$x)
plot(M4[[99993]]$x)
plot(M4[[99992]]$x)
library(seer)
