}
RW(M3[[1]]$x, M3[[1]]$xx, h=6)
RW <- function(training, test, h){
rw_fit <- rwf(training,drift=FALSE, h=h)
forecastRW <- forecast(rw_fit)$mean
RWaccuracy <- ACCURACY(forecast=forecastRW,test=test, training=training)
return(RWaccuracy=RWaccuracy)
}
RW(M3[[1]]$x, M3[[1]]$xx, h=6)
RW <- function(training, test, h){
rw_fit <- rwf(training,drift=FALSE, h=h)
forecastRW <- forecast(rw_fit)$mean
RWaccuracy <- ACCURACY(forecast=forecastRW,test=test, training=training)
return(RWaccuracy=unname(RWaccuracy))
}
RW(M3[[1]]$x, M3[[1]]$xx, h=6)
RW <- function(training, test, h){
rw_fit <- rwf(training,drift=FALSE, h=h)
forecastRW <- forecast(rw_fit)$mean
RWaccuracy <- ACCURACY(forecast=forecastRW,test=test, training=training)
return(RWaccuracy=name(RWaccuracy))
}
RW(M3[[1]]$x, M3[[1]]$xx, h=6)
RW <- function(training, test, h){
rw_fit <- rwf(training,drift=FALSE, h=h)
forecastRW <- forecast(rw_fit)$mean
RWaccuracy <- ACCURACY(forecast=forecastRW,test=test, training=training)
return(RWaccuracy=names(RWaccuracy))
}
RW(M3[[1]]$x, M3[[1]]$xx, h=6)
RW <- function(training, test, h){
rw_fit <- rwf(training,drift=FALSE, h=h)
forecastRW <- forecast(rw_fit)$mean
RWaccuracy <- ACCURACY(forecast=forecastRW,test=test, training=training)
return(RWaccuracy)
}
RW(M3[[1]]$x, M3[[1]]$xx, h=6)
RWD <- function(training, test, h){
rwd_fit <- rwf(training,drift=TRUE, h=h)
forecastRWD <- forecast(RWD)$mean
RWDaccuracy <- ACCURACY(forecastRWD, test, training)
return(RWDaccuracy)
}
RWD(M3[[1]]$x, M3[[1]]$xx, h=6)
RWD <- function(training, test, h){
rwd_fit <- rwf(training,drift=TRUE, h=h)
forecastRWD <- forecast(rwd_fit)$mean
RWDaccuracy <- ACCURACY(forecastRWD, test, training)
return(RWDaccuracy)
}
RWD(M3[[1]]$x, M3[[1]]$xx, h=6)
RWD <- function(training, test, h){
rwd_fit <- rwf(training,drift=TRUE, h=h)
forecastRWD <- forecast(rwd_fit)$mean
RWDaccuracy <- ACCURACY(forecast=forecastRWD, test=test, training=training)
return(RWDaccuracy)
}
RWD(M3[[1]]$x, M3[[1]]$xx, h=6)
WN <- function(training, test, h){
fit_WN <- Arima(training,order=c(0,0,0))
forecastWN <- forecast(fit_WN,h)$mean
WNaccuracy <- ACCUARACY(forecast=forecastWN,test=test, training=training)
return(WNaccuracy)
}
WN(M3[[1]]$x, M3[[1]]$xx, h=6)
WN <- function(training, test, h){
fit_WN <- Arima(training,order=c(0,0,0))
forecastWN <- forecast(fit_WN,h)$mean
WNaccuracy <- ACCURACY(forecast=forecastWN,test=test, training=training)
return(WNaccuracy)
}
WN(M3[[1]]$x, M3[[1]]$xx, h=6)
THETA <- function(training, test, h){
if (m > 1){
# using stheta method with seasonal adjustment
# require(forecTheta)
forecastTheta <- stheta(training,h=h, s='additive')$mean
THETAaccuracy <- ACCUARACY(forecast=forecastTheta, test=test, training=training)
} else {
# using thetaf method
fitTheta <-thetaf(training,h=length(test))$mean
THETAaccuracy <- ACCURACY(forecast=forecastTheta, test=test, training=training)
}
return(THETAaccuracy)
}
# Theta Method
THETA <- function(training, test, h, m){
if (m > 1){
# using stheta method with seasonal adjustment
# require(forecTheta)
forecastTheta <- stheta(training,h=h, s='additive')$mean
THETAaccuracy <- ACCUARACY(forecast=forecastTheta, test=test, training=training)
} else {
# using thetaf method
fitTheta <-thetaf(training,h=length(test))$mean
THETAaccuracy <- ACCURACY(forecast=forecastTheta, test=test, training=training)
}
return(THETAaccuracy)
}
THETA(M3[[1]]$x, M3[[1]]$xx, h=6, 1)
library(forecTheta)
THETA(M3[[1]]$x, M3[[1]]$xx, h=6, 1)
# Theta Method
THETA <- function(training, test, h, m){
if (m > 1){
# using stheta method with seasonal adjustment
# require(forecTheta)
forecastTheta <- stheta(training,h=h, s='additive')$mean
THETAaccuracy <- ACCUARACY(forecast=forecastTheta, test=test, training=training)
} else {
# using thetaf method
forecastTheta <-thetaf(training,h=length(test))$mean
THETAaccuracy <- ACCURACY(forecast=forecastTheta, test=test, training=training)
}
return(THETAaccuracy)
}
THETA(M3[[1]]$x, M3[[1]]$xx, h=6, 1)
STLAR <- function(training, test, h){
forecastSTLAR <- stlar(training,h=h)$mean
STLARaccuracy <- ACCURACY(forecast=forecastSTLAR, test=test, training=training)
return(STLARaccuracy)
}
STLAR(M3[[1]]$x, M3[[1]]$xx, h=6, 1)
STLAR(M3[[1]]$x, M3[[1]]$xx, h=6)
stlar <- function(y, h=10, s.window=11, robust=FALSE)
{
if(!is.ts(y))
y <- ts(y, frequency=findfrequency(y))
if(frequency(y)==1 | length(y) <= 2*frequency(y))
return(forecast(auto.arima(y, max.q=0), h=h))
fit_stlm <- stlm(y,s.window=s.window, robust=robust, modelfunction=ar)
fcast <- forecast(fit_stlm, h=h)
return(fcast)
}
STLAR(M3[[1]]$x, M3[[1]]$xx, h=6)
NN <- function(training, test, h){
fit_nnetar <- nnetar(training)
forecastnnetar <- forecast(fit_nnetar, h=h)$mean
nnetarACCURACY <- ACCURACY(forecastnnetar, test, training)
return(nnetarACCURACY)
}
NN(M3[[1]]$x, M3[[1]]$xx, h=6)
# Neural Network Time Series Forecasts
NN <- function(training, test, h){
fit_nnetar <- nnetar(training)
forecastnnetar <- forecast(fit_nnetar, h=h)$mean
nnetarACCURACY <- ACCURACY(forecast=forecastnnetar, test=test, training=training)
return(nnetarACCURACY)
}
NN(M3[[1]]$x, M3[[1]]$xx, h=6)
# season naive method
SNAIVE <- function(training, test, h){
forecastSNAIVE <- snaive(training, h=length(test))$mean
SNAIVEaccuracy <- ACCURACY(forecast=forecastSNAIVE, test=test, training=training)
return(SNAIVEaccuracy)
}
SNAIVE(M3[[1]]$x, M3[[1]]$xx, h=6)
# mstl
MSTL <- function(training, test, h){
fit_mstl <- mstl(training)
forecastMSTL <- forecast(training, h=length(test))$mean
MSTLaccuracy <- ACCURACY(forecast=forecastMSTL, test=test, training=training)
return(MSTLaccuracy)
}
MSTL(M3[[1]]$x, M3[[1]]$xx, h=6)
TBATS <- function(training, test, h){
fitTBAT <- tbats(training)
forecastTBATS <- forecast(fitTBAT, h=h)
TBATSaccuracy <- ACCURACY(forecast=forecastTBATS, test=test, training=training)
return(TBATSaccuracy)
}
TBATS(M3[[1]]$x, M3[[1]]$xx, h=6)
TBATS(M3[[100]]$x, M3[[100]]$xx, h=6)
TBATS <- function(training, test, h){
fitTBAT <- tbats(training)
forecastTBATS <- forecast(fitTBAT, h=h)$mean
TBATSaccuracy <- ACCURACY(forecast=forecastTBATS, test=test, training=training)
return(TBATSaccuracy)
}
TBATS(M3[[100]]$x, M3[[100]]$xx, h=6)
xx <- list(a=1,b=2)
xx
xx <- list(list(t1=1, t2=2),b=2)
xx
xx <- list(list(t1=1, t2=2),2)
xx[[1]]
m1 <- list(M3[[1]], M3[[2]])
m1
a1 <- sapply(m1, function(temp){training=temp$x, test=temp$xx})
a1 <- sapply(m1, function(temp){list(training=temp$x, test=temp$xx)})
a1
a1 <- lapply(m1, function(temp){list(training=temp$x, test=temp$xx)})
a1
tslist <- list(a=rnorm(20), b=rnorm(20))
tslist
library(seer)
lapply(tslist, function(temp){list(head.ts(data,h), tail.ts(data, h))})
lapply(tslist, function(temp){list(head_ts(data,h), tail_ts(data, h))})
h=6
lapply(tslist, function(temp){list(head_ts(data,h), tail_ts(data, h))})
library(forecast)
lapply(tslist, function(temp){list(head_ts(data,h), tail_ts(data, h))})
lapply(tslist, function(temp){list(head_ts(temp,h), tail_ts(temp, h))})
if (database == "NULL") {
lapply(tslist, function(temp){list(training=head_ts(temp,h), test=tail_ts(temp, h))})
} else {
lapply(tslist, function(temp){list(training=temp$x, test=temp$xx)})
}
lapply(tslist, function(temp){list(training=head_ts(temp,h), test=tail_ts(temp, h))})
# ARIMA
ARIMA <- function(ts_info){
training <- ts_info$training
test <- ts_info$test
arima_fit <- auto.arima(training)
forecastARIMA <- forecast(arima_fit,h)$mean
ARIMAaccuracy <- ACCURACY(forecast=forecastARIMA, test=test, training=training)
ARIMAmodel <- as.character(arima_fit)
return(list(ARIMAmodel=ARIMAmodel, ARIMAaccuracy=ARIMAaccuracy))
}
sapply(tslist, ARIMA)
tslist <- lapply(tslist, function(temp){list(training=head_ts(temp,h), test=tail_ts(temp, h))})
sapply(tslist, ARIMA)
lapply(tslist, ARIMA)
# Random Walk
RW <- function(ts_info){
training <- ts_info$training
test <- ts_info$test
rw_fit <- rwf(training,drift=FALSE, h=h)
forecastRW <- forecast(rw_fit)$mean
RWaccuracy <- ACCURACY(forecast=forecastRW,test=test, training=training)
return(RWaccuracy)
}
RWD <- function(ts_info){
training <- ts_info$training
test <- ts_info$test
rwd_fit <- rwf(training,drift=TRUE, h=h)
forecastRWD <- forecast(rwd_fit)$mean
RWDaccuracy <- ACCURACY(forecast=forecastRWD, test=test, training=training)
return(RWDaccuracy)
}
#'
#' Calculate foecast accuracy on test set according to a specified citerion
#' @param y a univariate time series or a Mcomp object
#' @param h forecast horizon
#' @param database whether the time series is from mcomp or other
#' @param accuracyFunction function to calculate the accuracy measure, the arguments
#' for the accuracy function should be training, test and forecast
#' @return accuracy measure calculated based on each method
#' @author Thiyanga Talagala
#' @export
fcast_accuracy <- function(tslist, models = c("ets", "arima", "rw", "rwd", "wn",
"theta", "stlar", "nn", "snaive", "mstl", "tbats"),
accuaracyFunction){
if (database == "NULL") {
lapply(tslist, function(temp){list(training=head_ts(temp,h), test=tail_ts(temp, h))})
} else {
lapply(tslist, function(temp){list(training=temp$x, test=temp$xx)})
}
ACCURACY <- accuracyFunction
mat <- sapply(models, function(f){
switch(f,
rw = sapply(tslist, RW),
rwd = sapply(tslist, RWD))
})
return(mat)
}
fcast_accuracy(tslist, models=c("rw"))
#'
#' Calculate foecast accuracy on test set according to a specified citerion
#' @param y a univariate time series or a Mcomp object
#' @param h forecast horizon
#' @param database whether the time series is from mcomp or other
#' @param accuracyFunction function to calculate the accuracy measure, the arguments
#' for the accuracy function should be training, test and forecast
#' @return accuracy measure calculated based on each method
#' @author Thiyanga Talagala
#' @export
fcast_accuracy <- function(tslist, models = c("ets", "arima", "rw", "rwd", "wn",
"theta", "stlar", "nn", "snaive", "mstl", "tbats"), database){
if (database == "NULL") {
lapply(tslist, function(temp){list(training=head_ts(temp,h), test=tail_ts(temp, h))})
} else {
lapply(tslist, function(temp){list(training=temp$x, test=temp$xx)})
}
ACCURACY <- accuracyFunction
mat <- sapply(models, function(f){
switch(f,
rw = sapply(tslist, RW),
rwd = sapply(tslist, RWD))
})
return(mat)
}
fcast_accuracy(tslist, models=c("rw"), database = "M3")
#'
#' Calculate foecast accuracy on test set according to a specified citerion
#' @param y a univariate time series or a Mcomp object
#' @param h forecast horizon
#' @param database whether the time series is from mcomp or other
#' @param accuracyFunction function to calculate the accuracy measure, the arguments
#' for the accuracy function should be training, test and forecast
#' @return accuracy measure calculated based on each method
#' @author Thiyanga Talagala
#' @export
fcast_accuracy <- function(tslist, models = c("ets", "arima", "rw", "rwd", "wn",
"theta", "stlar", "nn", "snaive", "mstl", "tbats"), database){
if (database == "NULL") {
lapply(tslist, function(temp){list(training=head_ts(temp,h), test=tail_ts(temp, h))})
} else {
lapply(tslist, function(temp){list(training=temp$x, test=temp$xx)})
}
mat <- sapply(models, function(f){
switch(f,
rw = sapply(tslist, RW),
rwd = sapply(tslist, RWD))
})
return(mat)
}
fcast_accuracy(tslist, models=c("rw"), database = "M3")
#'
#' Calculate foecast accuracy on test set according to a specified citerion
#' @param y a univariate time series or a Mcomp object
#' @param h forecast horizon
#' @param database whether the time series is from mcomp or other
#' @param accuracyFunction function to calculate the accuracy measure, the arguments
#' for the accuracy function should be training, test and forecast
#' @return accuracy measure calculated based on each method
#' @author Thiyanga Talagala
#' @export
fcast_accuracy <- function(tslist, models = c("ets", "arima", "rw", "rwd", "wn",
"theta", "stlar", "nn", "snaive", "mstl", "tbats"), database,
accuracyFunction){
if (database == "NULL") {
lapply(tslist, function(temp){list(training=head_ts(temp,h), test=tail_ts(temp, h))})
} else {
lapply(tslist, function(temp){list(training=temp$x, test=temp$xx)})
}
ACCURACY <- accuracyFunction
mat <- sapply(models, function(f){
switch(f,
rw = sapply(tslist, RW),
rwd = sapply(tslist, RWD))
})
return(mat)
}
fcast_accuracy(tslist, models=c("rw"), database = "M3", cal_MASE)
fcast_accuracy(tslist, models=c("rw"), database = "M3", cal_sMAPE)
fcast_accuracy(tslist, models=c("rw"), database = "M3", cal_WA)
ACCURACY()
ACCURACY
fcast_accuracy(tslist, models=c("rw"), database = "M3", "cal_WA")
rm(ACCU
)
rm(ACCURACY)
ACCURACY
fcast_accuracy(tslist, models=c("rw"), database = "M3", "cal_WA")
fcast_accuracy(tslist, models=c("rw"), database = "M3", cal_WA)
#'
#' Calculate foecast accuracy on test set according to a specified citerion
#' @param y a univariate time series or a Mcomp object
#' @param h forecast horizon
#' @param database whether the time series is from mcomp or other
#' @param accuracyFunction function to calculate the accuracy measure, the arguments
#' for the accuracy function should be training, test and forecast
#' @return accuracy measure calculated based on each method
#' @author Thiyanga Talagala
#' @export
fcast_accuracy <- function(tslist, models = c("ets", "arima", "rw", "rwd", "wn",
"theta", "stlar", "nn", "snaive", "mstl", "tbats"), database,
accuracyFunction){
if (database == "NULL") {
lapply(tslist, function(temp){list(training=head_ts(temp,h), test=tail_ts(temp, h))})
} else {
lapply(tslist, function(temp){list(training=temp$x, test=temp$xx)})
}
ACCURACY <- match.fun(accuracyFunction)
mat <- sapply(models, function(f){
switch(f,
rw = sapply(tslist, RW),
rwd = sapply(tslist, RWD))
})
return(mat)
}
fcast_accuracy(tslist, models=c("rw"), database = "M3", cal_WA)
library(seer)
fcast_accuracy(tslist, models=c("rw"), database = "M3", cal_WA)
ACCURACY <- cal_WA
fcast_accuracy(tslist, models=c("rw"), database = "M3", cal_WA)
#'
#' Calculate foecast accuracy on test set according to a specified citerion
#' @param y a univariate time series or a Mcomp object
#' @param h forecast horizon
#' @param database whether the time series is from mcomp or other
#' @param accuracyFunction function to calculate the accuracy measure, the arguments
#' for the accuracy function should be training, test and forecast
#' @return accuracy measure calculated based on each method
#' @author Thiyanga Talagala
#' @export
fcast_accuracy <- function(tslist, models = c("ets", "arima", "rw", "rwd", "wn",
"theta", "stlar", "nn", "snaive", "mstl", "tbats"), database,
ACCURACY){
if (database == "NULL") {
lapply(tslist, function(temp){list(training=head_ts(temp,h), test=tail_ts(temp, h))})
} else {
lapply(tslist, function(temp){list(training=temp$x, test=temp$xx)})
}
mat <- sapply(models, function(f){
switch(f,
rw = sapply(tslist, RW),
rwd = sapply(tslist, RWD))
})
return(mat)
}
fcast_accuracy(tslist, models=c("rw"), database = "M3", cal_MASE)
rm(ACCURACY)
fcast_accuracy(tslist, models=c("rw"), database = "M3", cal_MASE)
#'
#' Calculate foecast accuracy on test set according to a specified citerion
#' @param y a univariate time series or a Mcomp object
#' @param h forecast horizon
#' @param database whether the time series is from mcomp or other
#' @param accuracyFunction function to calculate the accuracy measure, the arguments
#' for the accuracy function should be training, test and forecast
#' @return accuracy measure calculated based on each method
#' @author Thiyanga Talagala
#' @export
fcast_accuracy <- function(tslist, models = c("ets", "arima", "rw", "rwd", "wn",
"theta", "stlar", "nn", "snaive", "mstl", "tbats"), database,
ACCURACY){
if (database == "NULL") {
lapply(tslist, function(temp){list(training=head_ts(temp,h), test=tail_ts(temp, h))})
} else {
lapply(tslist, function(temp){list(training=temp$x, test=temp$xx)})
}
ACCURACY <- match.fun(ACCURACY)
mat <- sapply(models, function(f){
switch(f,
rw = sapply(tslist, RW),
rwd = sapply(tslist, RWD))
})
return(mat)
}
fcast_accuracy(tslist, models=c("rw"), database = "M3", cal_MASE)
# Random Walk
RW <- function(ts_info, ACCURACY){
training <- ts_info$training
test <- ts_info$test
rw_fit <- rwf(training,drift=FALSE, h=h)
forecastRW <- forecast(rw_fit)$mean
RWaccuracy <- ACCURACY(forecast=forecastRW,test=test, training=training)
return(RWaccuracy)
}
RWD <- function(ts_info, ACCURACY){
training <- ts_info$training
test <- ts_info$test
rwd_fit <- rwf(training,drift=TRUE, h=h)
forecastRWD <- forecast(rwd_fit)$mean
RWDaccuracy <- ACCURACY(forecast=forecastRWD, test=test, training=training)
return(RWDaccuracy)
}
#'
#' Calculate foecast accuracy on test set according to a specified citerion
#' @param y a univariate time series or a Mcomp object
#' @param h forecast horizon
#' @param database whether the time series is from mcomp or other
#' @param accuracyFunction function to calculate the accuracy measure, the arguments
#' for the accuracy function should be training, test and forecast
#' @return accuracy measure calculated based on each method
#' @author Thiyanga Talagala
#' @export
fcast_accuracy <- function(tslist, models = c("ets", "arima", "rw", "rwd", "wn",
"theta", "stlar", "nn", "snaive", "mstl", "tbats"), database){
if (database == "NULL") {
lapply(tslist, function(temp){list(training=head_ts(temp,h), test=tail_ts(temp, h))})
} else {
lapply(tslist, function(temp){list(training=temp$x, test=temp$xx)})
}
mat <- sapply(models, function(f){
switch(f,
rw = sapply(tslist, RW, ACCURACY=accuracyFun),
rwd = sapply(tslist, RWD, ACCURACY=accuracyFun))
})
return(mat)
}
#'
#' Calculate foecast accuracy on test set according to a specified citerion
#' @param y a univariate time series or a Mcomp object
#' @param h forecast horizon
#' @param database whether the time series is from mcomp or other
#' @param accuracyFunction function to calculate the accuracy measure, the arguments
#' for the accuracy function should be training, test and forecast
#' @return accuracy measure calculated based on each method
#' @author Thiyanga Talagala
#' @export
fcast_accuracy <- function(tslist, models = c("ets", "arima", "rw", "rwd", "wn",
"theta", "stlar", "nn", "snaive", "mstl", "tbats"), database
, accuracyFun){
if (database == "NULL") {
lapply(tslist, function(temp){list(training=head_ts(temp,h), test=tail_ts(temp, h))})
} else {
lapply(tslist, function(temp){list(training=temp$x, test=temp$xx)})
}
mat <- sapply(models, function(f){
switch(f,
rw = sapply(tslist, RW, ACCURACY=accuracyFun),
rwd = sapply(tslist, RWD, ACCURACY=accuracyFun))
})
return(mat)
}
##################
fcast_accuracy(tslist, models=c("rw"), database = "M3", cal_MASE)
##################
fcast_accuracy(tslist, models=c("rw"), database = "M3", cal_WA)
