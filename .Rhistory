}
M4[[1]]
M4[["Y1"]]
M4[[100000]]
M4
# quarterly data
for (i in 1: 24000){
y <- (quarterly[i,-1])
M4[[paste0("Q",i)]] <- list(x=ts(y[!is.na(y)], frequency=4),
st=as.character(quarterly_info[i,"M4id"]),
type=as.character(quarterly_info[i,"category"]),
period=as.character(quarterly_info[i,"SP"]),
h=as.character(quarterly_info[i,"Horizon"]),
n = length(x))
M4[[paste0("Q",i)]] <- structure(M4[[paste0("Q",i)]], class="Mdata")
}
M4[["Q1"]]
# monthly data
for (i in 1: 48000){
y <- (monthly[i,-1])
M4[[paste0("M",i)]] <- list(x=ts(y[!is.na(y)], frequency=12),
st=as.character(monthly_info[i,"M4id"]),
type=as.character(monthly_info[i,"category"]),
period=as.character(monthly_info[i,"SP"]),
h=as.character(monthly_info[i,"Horizon"]),
n = length(x))
M4[[paste0("M",i)]] <- structure(M4[[paste0("M",i)]], class="Mdata")
}
# weekly data
for (i in 1: 359){
y <- (weekly[i,-1])
M4[[paste0("W",i)]] <- list(x=ts(y[!is.na(y)], frequency=52),
st=as.character(weekly_info[i,"M4id"]),
type=as.character(weekly_info[i,"category"]),
period=as.character(weekly_info[i,"SP"]),
h=as.character(weekly_info[i,"Horizon"]),
n = length(x))
M4[[paste0("W",i)]] <- structure(M4[[paste0("W",i)]], class="Mdata")
}
#  daily data
for (i in 1: 4227){
y <- (daily[i,-1])
daily_list[[paste0("D",i)]] <- list(x=ts(y[!is.na(y)], frequency=365),
st=as.character(daily_info[i,"M4id"]),
type=as.character(daily_info[i,"category"]),
period=as.character(daily_info[i,"SP"]),
h=as.character(daily_info[i,"Horizon"]),
n = length(x))
M4[[paste0("D",i)]] <- structure(M4[[paste0("D",i)]], class="Mdata")
}
#  daily data
for (i in 1: 4227){
y <- (daily[i,-1])
M4[[paste0("D",i)]] <- list(x=ts(y[!is.na(y)], frequency=365),
st=as.character(daily_info[i,"M4id"]),
type=as.character(daily_info[i,"category"]),
period=as.character(daily_info[i,"SP"]),
h=as.character(daily_info[i,"Horizon"]),
n = length(x))
M4[[paste0("D",i)]] <- structure(M4[[paste0("D",i)]], class="Mdata")
}
# hourly data
for (i in 1: 414){
y <- (hourly[i,-1])
M4[[paste0("H",i)]] <- list(x=ts(y[!is.na(y)], frequency=24),
st=as.character(hourly_info[i,"M4id"]),
type=as.character(hourly_info[i,"category"]),
period=as.character(hourly_info[i,"SP"]),
h=as.character(hourly_info[i,"Horizon"]),
n = length(x))
M4[[paste0("H",i)]] <- structure(M4[[paste0("H",i)]], class="Mdata")
}
M4 <- structure(M4,class="Mcomp")
M4
M4[["Q1"]]
M4[["Q1"]]$x
M4[["Q1"]]$n
ts <- subset(M4, "yearly")
ts <- subset(M4, "Yearly")
libray(Mcomp)
library(Mcomp)
ts <- subset(M4, "Yearly")
M3[[1]]$type
M3
subset.Mcomp()
subset.Mcomp
ts <- subset(M3, "Yearly")
ts <- subset(M3, "Demo")
ts
x <- "MiXeD cAsE 123"
tolower(x)
toupper(x)
library(readr)
#M4_info
M4_info <- read.csv("data-raw/M4-info.csv")
dim(M4_info) # 100000 5
yearly <- read.csv("data-raw/Yearly-train.csv")
dim(yearly) # 23000 836
yearly_info <- M4_info[1:23000,]
dim(yearly_info) # 23000 5
# monthly data
monthly <- read.csv("data-raw/Monthly-train.csv")
dim(monthly) # 48000 2795
monthly_info <- subset(M4_info, SP=="Monthly")
dim(monthly_info) # 48000 5
# Quarterly data
quarterly <- read.csv("data-raw/Quarterly-train.csv")
dim(quarterly) # 24000 867
quarterly_info <- subset(M4_info, SP=="Quarterly")
dim(quarterly_info) # 24000 5
# Weekly data
weekly <- read.csv("data-raw/Weekly-train.csv")
dim(weekly) # 359 2598
weekly_info <- subset(M4_info, SP=="Weekly")
dim(weekly_info) # 359 5
# daily data
daily <- read.csv("data-raw/Daily-train.csv")
dim(daily) # 4227 9920
daily_info <- subset(M4_info, SP=="Daily")
dim(daily_info) # 4227 5
# Hourly data
hourly <- read.csv("data-raw/Hourly-train.csv")
dim(hourly) # 414 961
hourly_info <- subset(M4_info, SP=="Hourly")
dim(hourly_info) # 414 5
# data processing
M4 <- list()
# yearly data
for (i in 1: 23000){
y <- (yearly[i,-1])
M4[[paste0("Y",i)]] <- list(x=ts(y[!is.na(y)], frequency=1),
st=as.character(yearly_info[i,"M4id"]),
type=toupper(as.character(yearly_info[i,"category"])),
period="YEARLY",
h=as.character(yearly_info[i,"Horizon"]),
n = length(x))
M4[[paste0("Y",i)]] <- structure(M4[[paste0("Y",i)]], class="Mdata")
}
# quarterly data
for (i in 1: 24000){
y <- (quarterly[i,-1])
M4[[paste0("Q",i)]] <- list(x=ts(y[!is.na(y)], frequency=4),
st=as.character(quarterly_info[i,"M4id"]),
type=toupper(as.character(quarterly_info[i,"category"])),
period="QUARTERLY",
h=as.character(quarterly_info[i,"Horizon"]),
n = length(x))
M4[[paste0("Q",i)]] <- structure(M4[[paste0("Q",i)]], class="Mdata")
}
# monthly data
for (i in 1: 48000){
y <- (monthly[i,-1])
M4[[paste0("M",i)]] <- list(x=ts(y[!is.na(y)], frequency=12),
st=as.character(monthly_info[i,"M4id"]),
type=toupper(as.character(monthly_info[i,"category"])),
period="MONTHLY",
h=as.character(monthly_info[i,"Horizon"]),
n = length(x))
M4[[paste0("M",i)]] <- structure(M4[[paste0("M",i)]], class="Mdata")
}
# weekly data
for (i in 1: 359){
y <- (weekly[i,-1])
M4[[paste0("W",i)]] <- list(x=ts(y[!is.na(y)], frequency=52),
st=as.character(weekly_info[i,"M4id"]),
type=toupper(as.character(weekly_info[i,"category"])),
period="WEEKLY",
h=as.character(weekly_info[i,"Horizon"]),
n = length(x))
M4[[paste0("W",i)]] <- structure(M4[[paste0("W",i)]], class="Mdata")
}
#  daily data
for (i in 1: 4227){
y <- (daily[i,-1])
M4[[paste0("D",i)]] <- list(x=ts(y[!is.na(y)], frequency=365),
st=as.character(daily_info[i,"M4id"]),
type=toupper(as.character(daily_info[i,"category"])),
period="DAILY",
h=as.character(daily_info[i,"Horizon"]),
n = length(x))
M4[[paste0("D",i)]] <- structure(M4[[paste0("D",i)]], class="Mdata")
}
# hourly data
for (i in 1: 414){
y <- (hourly[i,-1])
M4[[paste0("H",i)]] <- list(x=ts(y[!is.na(y)], frequency=24),
st=as.character(hourly_info[i,"M4id"]),
type=toupper(as.character(hourly_info[i,"category"])),
period="HOURLY",
h=as.character(hourly_info[i,"Horizon"]),
n = length(x))
M4[[paste0("H",i)]] <- structure(M4[[paste0("H",i)]], class="Mdata")
}
M4 <- structure(M4,class="Mcomp")
save(M4,file="M4.Rdata")
ts <- subset(M4, "Yearly")
ts
M4
dta <- load("M4.rda")
dta <- load("M4.Rdata")
save(M4, file="data/M4.RData", compress = "xz")
library(seer)
#' identify the best forecasting method
#'
#' identify the best forecasting method according to the forecast accuacy measure
#' @param accuracy_mat matrix of forecast accuracy measures (rows: time series, columns: forecasting method)
#' @return a vector: best forecasting method for each series corresponding to the rows of accuracy_mat
#' @author Thiyanga Talagala
#' @export
classlabel <- function(accuracy_mat){
DF <- as.data.frame(accuracy_mat)
name_col <- colnames(DF)[apply(DF,1,which.max)]
return(name_col)
}
DF <- matrix(sample(1:9,9),ncol=3,nrow=3)
classlabel(DF)
DF
#' identify the best forecasting method
#'
#' identify the best forecasting method according to the forecast accuacy measure
#' @param accuracy_mat matrix of forecast accuracy measures (rows: time series, columns: forecasting method)
#' @return a vector: best forecasting method for each series corresponding to the rows of accuracy_mat
#' @author Thiyanga Talagala
#' @export
classlabel <- function(accuracy_mat){
DF <- as.data.frame(accuracy_mat)
name_col <- colnames(DF)[apply(DF,1,which.min)]
return(name_col)
}
classlabel(DF)
DF
library(Mcomp)
library(seer)
tslist <- list(M3[[1]], M3[[2]])
accmat <- fcast_accuracy(tslist=tslist,models= c("arima","ets","rw","rwd", "theta", "stlar", "nn", "snaive", "mstl"),database ="M3", cal_MASE, h=6)
classlabel(accmat$accuracy)
accmat
library(seer)
M4
M4_hourly <- subset(M4, "Hourly")
M4_hourly <- subset(M4, "Quarterly")
M4_hourly
M4_hourly <- subset(M4, "Hourly")
M4_hourly
Mcomp.sub
liibrary(Mcomp)
Mcomp.sub
library(Mcomp)
Mcomp.sub
Mcomp::subset.Mcomp()
Mcomp::subset.Mcomp
?subset
Mcomp::subset.Mcomp()
Mcomp::subset.Mcomp
M4_hourly <- subset(M4, "Monthly")
M_hourly
M4_hourly
M4_hourly <- subset(M4, "Demographic")
M4_hourly
M4_hourly <- subset(M4, "Weekly")
M4_hourly <- subset(M4, "WEEKLY")
M4_hourly <- subset(M4, "Finance")
M4_hourly
M4
M4_hourly <- filter(M4, "Hourly")
M4_hourly <- filter(M4, "Othe")
M4_hourly <- filter(M4, "Other")
M4_hourly <- subset(M4, "Other")
M4_hourly <- subset(M4, "OTHER")
M4_hourly <- subset(M4, "FIN")
M4_hourly <- subset(M4, "OTH")
M4_hourly <- subset(M4, "Weekly")
M4_hourly <- subset(M4, "Daily")
M4_hourly <- subset(M4, "Y")
plot(M4[[1]])
plot(M4[[1]]$x)
plot(M3[[1]])
plot(M4[[1]])
M4
#' @export
Mcomp.sub <- function(x,getdata)
{
n <- length(x)
Type <- Period <- character(n)
for(i in 1:n)
{
Type[i] <- x[[i]]$type
if(Type[i]=="INDUSTRIAL")
Type[i] <- "INDUST"
if(strsplit(Type[i],"-")=="DEMOGRAPHI")
Type[i] <- "DEMOGRAPHIC"
Period[i] <- x[[i]]$period
}
getdatatable <- c("yearly","quarterly","monthly","hourly","weekly","daily","other","macro","micro","industry",
"finance","demographic","allother","macro1","macro2","micro1","micro2","micro3")
if(is.character(getdata))
{
getdata <- getdatatable[charmatch(getdata,getdatatable)]
if(length(getdata) != 1)
stop("Ambiguous data type")
else if(is.na(getdata))
stop("Unknown data type")
}
if(getdata==1 | getdata=="yearly")
choose <- (Period=="YEARLY")
else if(getdata==4 | getdata=="quarterly")
choose <- (Period=="QUARTERLY")
else if(getdata==12 | getdata=="monthly")
choose <- (Period=="MONTHLY")
else if(getdata==52 | getdata=="weekly")
choose <- (Period=="WEEKLY")
else if(getdata==24 | getdata=="hourly")
choose <- (Period=="HOURLY")
else if(getdata==365 | getdata=="daily")
choose <- (Period=="DAILY")
else if(getdata==111)
{
j <- match(x111,names(x))
choose <- rep(FALSE,length(x))
choose[j] <- TRUE
}
else if(getdata=="other")
choose <- (Period=="OTHER")
else if(getdata=="macro")
choose <- (Type=="MACRO")
else if(getdata=="micro")
choose <- (Type=="MICRO")
else if(getdata=="industry")
choose <- (Type=="INDUSTRY" | Type=="INDUST")
else if(getdata=="finance")
choose <- (Type=="FINANCE")
else if(getdata=="demographic")
choose <- (Type=="DEMOGRAPHIC" | Type=="DEMOGR")
else if(getdata=="allother")
choose <- (Type=="OTHER")
else if(getdata=="macro1")
choose <- (Type=="MACRO1")
else if(getdata=="macro2")
choose <- (Type=="MACRO2")
else if(getdata=="micro1")
choose <- (Type=="MICRO1")
else if(getdata=="micro2")
choose <- (Type=="MICRO2")
else if(getdata=="micro3")
choose <- (Type=="MICRO3")
else
stop("Unknown type or period")
if(sum(choose) == 0)
stop("No data")
return(x[choose])
}
#' @author Thiyanga Talagala
#' @references
#' @keywords data
#' @examples
#'
#' M3.quarterly <- subset(M3,4)
#' M1.yearly.industry <- subset(M1,1,"industry")
#' @export
#' @export subset.Mcomp
#'
subset.Mcomp <- function(x,cond1,cond2,...)
{
if(is.character(cond1))
cond1 <- tolower(cond1)
M11=structure(Mcomp.sub(x,cond1),class="Mcomp")
if(!missing(cond2))
{
if(is.character(cond2))
cond2 <- tolower(cond2)
M12=structure(Mcomp.sub(M11,cond2),class="Mcomp")
return(M12)
}
else
return(M11)
}
#' @export
`[.Mcomp` <- function(x, i)
{
y <- NextMethod("[")
class(y) <- c("Mcomp", class(y))
y
}
m4h <- subset(M4, "hourly")
m4h <- subset(M4, "Hourly")
m4h
citation("Mcomp")
citation("mozzie")
citation("colmozzie")
library(seer)
M4
m4h <- subset(M4, "Hourly")
m4h
m4h <- subset(M4, "Daily")
m4h
#' The following code is taken from Mcomp package and done some
#' small tweaks to handle hourly, daily and weekly data in M4 competition.
#' @param x whether the data are from M1, M3 or M4
#' @param getdata condition: daily, monthly, demographic, etc.
#' @export
Mcomp.sub <- function(x,getdata)
{
n <- length(x)
Type <- Period <- character(n)
for(i in 1:n)
{
Type[i] <- x[[i]]$type
if(Type[i]=="INDUSTRIAL")
Type[i] <- "INDUST"
if(strsplit(Type[i],"-")=="DEMOGRAPHI")
Type[i] <- "DEMOGRAPHIC"
Period[i] <- x[[i]]$period
}
getdatatable <- c("yearly","quarterly","monthly","hourly","weekly","daily","other","macro","micro","industry",
"finance","demographic","allother","macro1","macro2","micro1","micro2","micro3")
if(is.character(getdata))
{
getdata <- getdatatable[charmatch(getdata,getdatatable)]
if(length(getdata) != 1)
stop("Ambiguous data type")
else if(is.na(getdata))
stop("Unknown data type")
}
if(getdata==1 | getdata=="yearly")
choose <- (Period=="YEARLY")
else if(getdata==4 | getdata=="quarterly")
choose <- (Period=="QUARTERLY")
else if(getdata==12 | getdata=="monthly")
choose <- (Period=="MONTHLY")
else if(getdata==52 | getdata=="weekly")
choose <- (Period=="WEEKLY")
else if(getdata==24 | getdata=="hourly")
choose <- (Period=="HOURLY")
else if(getdata==365 | getdata=="daily")
choose <- (Period=="DAILY")
#else if(getdata==111)
#{
#    j <- match(x111,names(x))
#    choose <- rep(FALSE,length(x))
#    choose[j] <- TRUE
#   }
else if(getdata=="other")
choose <- (Period=="OTHER")
else if(getdata=="macro")
choose <- (Type=="MACRO")
else if(getdata=="micro")
choose <- (Type=="MICRO")
else if(getdata=="industry")
choose <- (Type=="INDUSTRY" | Type=="INDUST")
else if(getdata=="finance")
choose <- (Type=="FINANCE")
else if(getdata=="demographic")
choose <- (Type=="DEMOGRAPHIC" | Type=="DEMOGR")
else if(getdata=="allother")
choose <- (Type=="OTHER")
else if(getdata=="macro1")
choose <- (Type=="MACRO1")
else if(getdata=="macro2")
choose <- (Type=="MACRO2")
else if(getdata=="micro1")
choose <- (Type=="MICRO1")
else if(getdata=="micro2")
choose <- (Type=="MICRO2")
else if(getdata=="micro3")
choose <- (Type=="MICRO3")
else
stop("Unknown type or period")
if(sum(choose) == 0)
stop("No data")
return(x[choose])
}
#' @return An object of class \code{Mcomp} consisting of the selected series.
#' @references Rob Hyndman (2018). Mcomp: Data from the M-Competitions. R package version 2.7. https://CRAN.R-project.org/package=Mcomp
#' @keywords data
#' @examples
#'
#' M3.quarterly <- subset(M3,4)
#' M1.yearly.industry <- subset(M1,1,"industry")
#' @export
#' @export subset.Mcomp
#'
subset.Mcomp <- function(x,cond1,cond2,...)
{
if(is.character(cond1))
cond1 <- tolower(cond1)
M11=structure(Mcomp.sub(x,cond1),class="Mcomp")
if(!missing(cond2))
{
if(is.character(cond2))
cond2 <- tolower(cond2)
M12=structure(Mcomp.sub(M11,cond2),class="Mcomp")
return(M12)
}
else
return(M11)
}
#' @export
`[.Mcomp` <- function(x, i)
{
y <- NextMethod("[")
class(y) <- c("Mcomp", class(y))
y
}
subset(M4, "daily")
subset(M3, "daily")
subset(M3, "yearly")
library(seer)
subset(M4, 4)
subset(M4,1,"industry")
library(seer)
library(seer)
library(seer)
